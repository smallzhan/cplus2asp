#line 2 "flexer.cpp"
#line 2 "flexer.l"
#include <string>
#include "parser.h"
#include "flexertypes.h"
#include "ltsglobals.h"

#ifdef flexIN_HEADER
/**
 * @file flexer.h
 * @brief Contains rules and definitions used by flex to create a lexical analyzer.
 */

extern YYSTYPE yyxlval;
extern YYLTYPE yyxlloc;

extern int flexerLineNum;
extern int flexerCharPos;
extern std::string flexerFileName;

extern flexerValueType flexeryylvalType;

/**
 * Outputs an error message to stderr.
 * Automatically adds file and line number information to the message.
 * @param msg - The specific message to add after the error header info.
 */
void flexerError(char const *msg);

/**
 * Resets the internal state of the flexer to initial values.
 */
void flexerReset();
#endif



#line 39 "flexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer flex_create_buffer
#define yy_delete_buffer flex_delete_buffer
#define yy_flex_debug flex_flex_debug
#define yy_init_buffer flex_init_buffer
#define yy_flush_buffer flex_flush_buffer
#define yy_load_buffer_state flex_load_buffer_state
#define yy_switch_to_buffer flex_switch_to_buffer
#define yyin flexin
#define yyleng flexleng
#define yylex flexlex
#define yylineno flexlineno
#define yyout flexout
#define yyrestart flexrestart
#define yytext flextext
#define yywrap flexwrap
#define yyalloc flexalloc
#define yyrealloc flexrealloc
#define yyfree flexfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE flexrestart(flexin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int flexleng;

extern FILE *flexin, *flexout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up flextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up flextext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via flexrestart()), so that the user can continue scanning by
	 * just pointing flexin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when flextext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int flexleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow flexwrap()'s to do buffer switches
 * instead of setting up a fresh flexin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void flexrestart (FILE *input_file  );
void flex_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE flex_create_buffer (FILE *file,int size  );
void flex_delete_buffer (YY_BUFFER_STATE b  );
void flex_flush_buffer (YY_BUFFER_STATE b  );
void flexpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void flexpop_buffer_state (void );

static void flexensure_buffer_stack (void );
static void flex_load_buffer_state (void );
static void flex_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER flex_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE flex_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE flex_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE flex_scan_bytes (yyconst char *bytes,int len  );

void *flexalloc (yy_size_t  );
void *flexrealloc (void *,yy_size_t  );
void flexfree (void *  );

#define yy_new_buffer flex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        flexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            flex_create_buffer(flexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        flexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            flex_create_buffer(flexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define flexwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *flexin = (FILE *) 0, *flexout = (FILE *) 0;

typedef int yy_state_type;

extern int flexlineno;

int flexlineno = 1;

extern char *flextext;
#define yytext_ptr flextext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up flextext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	flexleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[412] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  124,  122,   28,   27,   15,  103,    2,   91,
        9,  108,  109,  104,   93,  100,   77,   95,  122,  118,
       74,  101,   82,   89,   85,  105,  119,  106,  122,  107,
      122,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  102,   28,   26,   74,    4,    6,    5,    7,    8,
       13,   14,   11,   12,   19,   20,   17,   18,   23,   24,
       23,   28,   90,   92,   76,   94,    1,   98,   99,  118,
       72,   73,   79,   80,   81,   87,   88,   86,   83,   84,

      119,   97,   96,  121,    0,  120,  120,  120,  120,  120,
      120,  120,   45,  120,  120,  120,  111,  120,  120,   53,
      120,   71,  120,  120,  120,  120,  120,  120,   64,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
       28,   25,   72,    4,    3,    7,   13,   10,   19,   16,
       23,   23,   75,   78,  121,  120,  110,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  113,  114,  120,  120,  120,  116,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,    0,   23,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,    0,  120,  120,  115,  120,  120,  120,
      120,  120,   34,  120,  120,  117,  120,  120,  120,    0,
       23,  120,  120,  120,   42,  120,  120,  120,  120,  120,
      120,  120,  112,  120,  120,  120,   57,  120,  120,  120,
        0,   61,  120,  120,  120,  120,   33,   66,  120,  120,
       35,  120,  120,   70,    0,   23,  120,   38,  120,   43,
      120,   46,   47,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   31,  120,  120,    0,  120,  120,  120,  120,
      120,  120,   69,  120,    0,   23,  120,  120,  120,  120,

      120,  120,   50,  120,   30,  120,  120,  120,  120,   60,
        0,  120,  120,   32,  120,  120,  120,  120,    0,   23,
       37,  120,  120,  120,  120,  120,  120,  120,   55,  120,
      120,    0,  120,  120,  120,   67,  120,  120,    0,   23,
      120,  120,   44,   29,  120,  120,   51,  120,  120,  120,
      120,   58,  120,  120,    0,  120,   36,    0,   23,  120,
      120,   48,   49,  120,   54,  120,  120,  120,  120,  120,
        0,  120,    0,   23,  120,  120,  120,  120,   39,   59,
      120,  120,    0,  120,    0,   22,  120,  120,  120,  120,
      120,  120,    0,   68,    0,  120,  120,  120,  120,   62,

       63,    0,   21,   40,   41,  120,   56,    0,   52,   65,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,   24,   25,   26,   26,   26,   26,   27,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       28,   29,   30,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   42,    1,   57,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[58] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        1,    5,    1,    1,    1,    1,    1,    6,    1,    1,
        1,    1,    1,    1,    6,    6,    6,    1,    7,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1
    } ;

static yyconst flex_int16_t yy_base[426] =
    {   0,
        0,   56,   58,   59,  480,  479,   60,   63,   62,   71,
      478,   61,  480,  484,   75,  484,  484,  484,  484,  471,
      484,  484,  484,  484,  465,  484,  454,  460,   56,  457,
       63,  484,   71,   74,   61,  484,    0,  484,   81,  484,
      443,   71,  417,   55,  436,   33,  439,    0,   62,  438,
       70,   73,   78,  423,  416,  427,   78,  417,  420,  432,
      424,  484,  123,  484,  113,    0,  484,  445,    0,  484,
        0,  484,  484,  452,    0,  484,  484,  455,    0,  484,
      444,  119,  484,  484,  435,  484,  484,  484,  484,  439,
      484,  484,  433,  484,  484,  484,  484,  484,  484,  484,

        0,  484,  484,    0,  424,    0,   85,  403,  418,  401,
      397,  399,    0,  397,  403,   96,    0,  401,  403,    0,
       95,    0,  412,   86,  409,   86,  102,  402,    0,  392,
      405,  402,  412,  392,  393,  387,  383,  391,  384,  396,
      141,  484,  136,    0,  484,    0,    0,  484,    0,  484,
        0,  144,  484,  484,    0,  397,    0,  390,  389,  392,
      395,  377,  375,  374,  374,  390,  383,  370,  106,  370,
      382,  368,  112,  412,    0,    0,  379,  368,  377,    0,
      376,  361,  361,  369,  365,  353,  359,  354,  368,  367,
      362,  352,  148,  152,  349,  353,  347,  348,  340,  355,

      358,  342,  356,  339,  354,  353,  336,  351,  335,  342,
      338,  348,  331,  347,  331,  334,  323,  343,  336,  319,
      339,  321,    0,  329,  321,    0,  320,  337,  332,  331,
      321,  325,  319,  323,    0,  312,  328,  116,  125,  316,
      316,  313,    0,  322,  312,  315,    0,  133,  319,  317,
      320,    0,  317,  314,  298,  315,    0,    0,  311,  310,
        0,  295,  311,    0,  305,  307,  295,    0,  287,    0,
      287,    0,    0,  293,  305,  300,  284,  288,  297,  296,
      299,  296,    0,  289,  281,  275,  274,  291,  274,  280,
      277,  294,    0,  277,  279,  287,  272,  280,  264,  263,

      273,  267,    0,  259,    0,  265,  266,  257,  256,    0,
      256,  256,  252,    0,  247,  251,  258,  264,  254,  266,
        0,  134,  261,  246,  250,  243,  243,  241,  264,  250,
      249,  252,  238,  235,  281,    0,  232,  233,  251,  231,
      246,  236,    0,    0,  227,  227,  251,  225,  231,  227,
      219,  484,  235,  238,  235,  232,    0,  235,  219,  214,
      212,    0,    0,  229,    0,  210,  216,  224,  214,  225,
      225,  206,  196,  229,  201,  203,  181,  192,    0,    0,
      191,  144,  134,  134,  137,    0,  136,  135,  139,  133,
      121,  140,  125,    0,  157,  127,  120,  124,  118,    0,

        0,  132,  484,    0,    0,  122,    0,  130,    0,  484,
      484,  188,  195,  202,  209,  216,  158,  157,  154,  223,
      230,  237,  243,  249,   84
    } ;

static yyconst flex_int16_t yy_def[426] =
    {   0,
      411,    1,  412,  412,  413,  413,  414,  414,  415,  415,
      416,  416,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  417,  411,  411,  411,
      418,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  411,  411,  411,  411,  420,  411,  411,  421,  411,
      422,  411,  411,  411,  423,  411,  411,  411,  424,  411,
      424,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,

      417,  411,  411,  425,  418,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      411,  411,  411,  420,  411,  421,  422,  411,  423,  411,
      424,  424,  411,  411,  425,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  411,  424,  419,  419,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  411,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  411,
      424,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      411,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  411,  424,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  411,  419,  419,  419,  419,
      419,  419,  419,  419,  411,  424,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      411,  419,  419,  419,  419,  419,  419,  419,  411,  424,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  411,  419,  419,  419,  419,  419,  419,  411,  424,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  411,  419,  419,  411,  419,  419,  411,  424,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      411,  419,  411,  424,  419,  419,  419,  419,  419,  419,
      419,  419,  411,  419,  411,  424,  419,  419,  419,  419,
      419,  419,  411,  419,  411,  419,  419,  419,  419,  419,

      419,  411,  411,  419,  419,  419,  419,  411,  419,  411,
        0,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411
    } ;

static yyconst flex_int16_t yy_nxt[542] =
    {   0,
       14,   15,   16,   15,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   37,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   48,   49,
       48,   48,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   48,   48,   62,   63,   64,   63,
       67,   67,   72,   80,   76,   72,   77,   87,   73,   68,
       68,   73,   88,   76,   65,   77,   82,   91,   82,   81,
      117,   92,   99,  100,   89,   93,  114,  118,   74,  155,
       78,   74,   94,   95,   96,   97,   98,  102,  120,   78,

      115,  124,  103,  107,  108,  109,  121,  110,  126,  156,
      128,  122,  133,  111,  129,  125,  134,  135,  127,  172,
       82,  112,   82,  136,  141,  142,  141,  143,  169,  165,
      170,   92,  166,  176,  157,  178,  212,  193,  177,  193,
      173,  174,  141,  142,  141,  194,  179,  194,  207,  193,
      272,  193,  180,  194,  208,  194,  274,  282,  341,  106,
      342,  213,  104,  101,  410,  273,  409,  408,  407,  406,
      405,  404,  403,  275,  402,  401,  400,  399,  398,  397,
      230,  396,  283,  395,  394,  393,  392,  231,   66,   66,
       66,   66,   66,   66,   66,   69,   69,   69,   69,   69,

       69,   69,   71,   71,   71,   71,   71,   71,   71,   75,
       75,   75,   75,   75,   75,   75,   79,   79,   79,   79,
       79,   79,   79,  144,  391,  144,  144,  390,  144,  144,
      146,  389,  146,  146,  146,  146,  146,  147,  388,  147,
      387,  147,  147,  149,  386,  385,  149,  149,  149,  151,
      384,  151,  151,  151,  151,  151,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  340,  339,  338,

      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  281,  280,  279,  278,  277,  276,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,

      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  211,  210,  209,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  175,  171,  168,  167,  164,  163,  162,
      161,  160,  159,  158,  105,  154,   90,  153,  152,  150,
      148,  145,  140,  139,  138,  137,  132,  131,  130,  123,
      119,  116,  113,  105,   90,   86,   85,   84,   83,  411,
       80,   70,   70,   13,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411
    } ;

static yyconst flex_int16_t yy_chk[542] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        3,    4,    7,   12,    9,    8,    9,   29,    7,    3,
        4,    8,   29,   10,    2,   10,   15,   31,   15,   12,
       46,   31,   35,   35,   29,   33,   44,   46,    7,  425,
        9,    8,   33,   33,   34,   34,   34,   39,   49,   10,

       44,   51,   39,   42,   42,   42,   49,   42,   52,  107,
       53,   49,   57,   42,   53,   51,   57,   57,   52,  124,
       82,   42,   82,   57,   63,   63,   63,   65,  121,  116,
      121,   65,  116,  126,  107,  127,  173,  143,  126,  143,
      124,  124,  141,  141,  141,  152,  127,  152,  169,  193,
      238,  193,  127,  194,  169,  194,  239,  248,  322,  419,
      322,  173,  418,  417,  408,  238,  406,  402,  399,  398,
      397,  396,  395,  239,  393,  392,  391,  390,  389,  388,
      193,  387,  248,  385,  384,  383,  382,  194,  412,  412,
      412,  412,  412,  412,  412,  413,  413,  413,  413,  413,

      413,  413,  414,  414,  414,  414,  414,  414,  414,  415,
      415,  415,  415,  415,  415,  415,  416,  416,  416,  416,
      416,  416,  416,  420,  381,  420,  420,  378,  420,  420,
      421,  377,  421,  421,  421,  421,  421,  422,  376,  422,
      375,  422,  422,  423,  374,  373,  423,  423,  423,  424,
      372,  424,  424,  424,  424,  424,  371,  370,  369,  368,
      367,  366,  364,  361,  360,  359,  358,  356,  355,  354,
      353,  351,  350,  349,  348,  347,  346,  345,  342,  341,
      340,  339,  338,  337,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  320,  319,  318,

      317,  316,  315,  313,  312,  311,  309,  308,  307,  306,
      304,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  271,  269,
      267,  266,  265,  263,  262,  260,  259,  256,  255,  254,
      253,  251,  250,  249,  246,  245,  244,  242,  241,  240,
      237,  236,  234,  233,  232,  231,  230,  229,  228,  227,
      225,  224,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,

      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  179,  178,  177,  174,  172,  171,  170,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      156,  140,  139,  138,  137,  136,  135,  134,  133,  132,
      131,  130,  128,  125,  123,  119,  118,  115,  114,  112,
      111,  110,  109,  108,  105,   93,   90,   85,   81,   78,
       74,   68,   61,   60,   59,   58,   56,   55,   54,   50,
       47,   45,   43,   41,   30,   28,   27,   25,   20,   13,
       11,    6,    5,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int flex_flex_debug;
int flex_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *flextext;
#line 1 "flexer.l"

#line 37 "flexer.l"
int flexerLineNum = 1; // Saves having to use flexlineno.
int flexerCharPos = 1; // Tracks current start character position to help populate yylloc.
std::string flexerFileName = ""; // Stores the file name (or equivalent identifier) for what flexin is pointing at.
flexerValueType flexeryylvalType;

void flexerError(char const *);

std::string tempStr = ""; // Used to collect string data in token rules.
YYLTYPE tempLoc; // Used to collect temporary location data for block text.

// Macro definitions to help set and return proper token values.
// Designed to be sent to intermediate "parser", hence the "yyx" prefix for the parser-specific variables (vs. standard "yy").
#define TOK_INT(value) \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.integer = value; \
flexeryylvalType = VT_INT;

#define TOK_IDENT \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.str = new std::string(flextext, flexleng); \
flexeryylvalType = VT_STR;

#define TOK_STR(strText) \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - strText.length(); \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.str = new std::string(strText); \
flexeryylvalType = VT_STR;

#define TOK_COMMENT(strText,isComment) \
yyxlloc.first_line = tempLoc.first_line; \
yyxlloc.last_line = tempLoc.last_line; \
yyxlloc.first_column = tempLoc.first_column; \
yyxlloc.last_column = tempLoc.last_column; \
yyxlval.com = new Comment(); \
yyxlval.com->fileName = flexerFileName; \
yyxlval.com->contents = strText; \
yyxlval.com->loc->first_line = tempLoc.first_line; \
yyxlval.com->loc->last_line = tempLoc.last_line; \
yyxlval.com->loc->first_column = tempLoc.first_column; \
yyxlval.com->loc->last_column = tempLoc.last_column; \
yyxlval.com->isRealComment = isComment; \
flexeryylvalType = VT_COMMENT;

#define TOK_ASP(strText) \
yyxlloc.first_line = tempLoc.first_line; \
yyxlloc.last_line = tempLoc.last_line; \
yyxlloc.first_column = tempLoc.first_column; \
yyxlloc.last_column = tempLoc.last_column; \
yyxlval.asp = new ASPCode(); \
yyxlval.asp->fileName = flexerFileName; \
yyxlval.asp->contents = strText; \
yyxlval.asp->loc->first_line = tempLoc.first_line; \
yyxlval.asp->loc->last_line = tempLoc.last_line; \
yyxlval.asp->loc->first_column = tempLoc.first_column; \
yyxlval.asp->loc->last_column = tempLoc.last_column; \
flexeryylvalType = VT_ASP;

#define TOK_EOF \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - flexleng; \
yyxlval.integer = 0; \
flexeryylvalType = VT_INT;

// Set to always increment the character position tracker whenever a new token is identified.
#define YY_USER_ACTION \
flexerCharPos += flexleng;

// Used as a pretend return value when bad syntax is encountered.
#define BAD_TOKEN -1






#line 859 "flexer.cpp"

#define INITIAL 0
#define BLK_SCOMMENT 1
#define LINE_COMMENT 2
#define SINGLE_QUOTE_STR 3
#define DOUBLE_QUOTE_STR 4
#define RAW_ASP 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int flexlex_destroy (void );

int flexget_debug (void );

void flexset_debug (int debug_flag  );

YY_EXTRA_TYPE flexget_extra (void );

void flexset_extra (YY_EXTRA_TYPE user_defined  );

FILE *flexget_in (void );

void flexset_in  (FILE * in_str  );

FILE *flexget_out (void );

void flexset_out  (FILE * out_str  );

int flexget_leng (void );

char *flexget_text (void );

int flexget_lineno (void );

void flexset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int flexwrap (void );
#else
extern int flexwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( flextext, flexleng, 1, flexout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( flexin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( flexin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, flexin))==0 && ferror(flexin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(flexin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int flexlex (void);

#define YY_DECL int flexlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after flextext and flexleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( flexleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(flextext[flexleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 131 "flexer.l"

#line 1054 "flexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! flexin )
			flexin = stdin;

		if ( ! flexout )
			flexout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			flexensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				flex_create_buffer(flexin,YY_BUF_SIZE );
		}

		flex_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of flextext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 412 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 484 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 132 "flexer.l"
{
                        tempStr = "";
                        tempLoc.first_line = flexerLineNum;
                        tempLoc.first_column = flexerCharPos - 2;
                        BEGIN(BLK_SCOMMENT);
                    }
	YY_BREAK
/* \%[^\n] */
case 2:
YY_RULE_SETUP
#line 139 "flexer.l"
{
                        tempStr = "";
                        tempLoc.first_line = flexerLineNum;
                        tempLoc.first_column = flexerCharPos - 1;
                        BEGIN(LINE_COMMENT);
                    }
	YY_BREAK
/* Grab comments of all shapes and sizes. */

case 3:
YY_RULE_SETUP
#line 147 "flexer.l"
{   // Block comment finished, return its contents.
                        tempLoc.last_line = flexerLineNum;
                        tempLoc.last_column = flexerCharPos;
                        TOK_COMMENT(tempStr,true);
                        BEGIN(INITIAL);
                        return T_COMMENT;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "flexer.l"
{   // Grab comment text in chunks.
                        tempStr += flextext;
                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 157 "flexer.l"
{   // Grab a lone "*".
                        tempStr += flextext;
                    }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 160 "flexer.l"
{   // Handle newlines in block comments.
                        flexerLineNum++;
                        flexerCharPos = 1;
                        tempStr += "\n";
                    }
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 167 "flexer.l"
{   // Grab anything that isn't a newline.
                        tempStr += flextext;
                    }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 170 "flexer.l"
{   // Line comment finished, return its contents and aknowledge the newline.
                        tempLoc.last_line = flexerLineNum;
                        tempLoc.last_column = flexerCharPos;
                        TOK_COMMENT(tempStr,true);
                        flexerLineNum++;
                        flexerCharPos = 1;
                        BEGIN(INITIAL);
                        return T_COMMENT;
                    }
	YY_BREAK

/*\%\n              {   // Handle single-character comment corner case.
                        tempStr = "";
                        tempLoc.first_line = flexerLineNum;
                        tempLoc.first_column = flexerCharPos - 2;
                        tempLoc.last_line = flexerLineNum;
                        tempLoc.last_column = flexerCharPos - 1;
                        TOK_COMMENT(tempStr,true);
                        flexerLineNum++;
                        flexerCharPos = 1;
                        return T_COMMENT;
                    }*/
/* Handle quoted strings gracefully. */
case 9:
YY_RULE_SETUP
#line 193 "flexer.l"
{ BEGIN(SINGLE_QUOTE_STR); }
	YY_BREAK

case 10:
YY_RULE_SETUP
#line 195 "flexer.l"
{ tempStr += "'"; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 196 "flexer.l"
{ TOK_STR(tempStr); BEGIN(INITIAL); return T_STRING; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "flexer.l"
{ tempStr += "\\"; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "flexer.l"
{ tempStr += flextext; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 199 "flexer.l"
{
                        TOK_EOF;
                        flexerError("Unexpected line break in quoted string.");
                        tempStr = "";
                        flexerLineNum++;
                        flexerCharPos = 1;
                        BEGIN(INITIAL);
                        return BAD_TOKEN;
                    }
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 209 "flexer.l"
{ BEGIN(DOUBLE_QUOTE_STR); }
	YY_BREAK

case 16:
YY_RULE_SETUP
#line 211 "flexer.l"
{ tempStr += "\""; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 212 "flexer.l"
{ TOK_STR(tempStr); BEGIN(INITIAL); return T_STRING; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 213 "flexer.l"
{ tempStr += "\\"; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 214 "flexer.l"
{ tempStr += flextext; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 215 "flexer.l"
{
                        TOK_EOF;
                        flexerError("Unexpected line break in quoted string.");
                        tempStr = "";
                        flexerLineNum++;
                        flexerCharPos = 1;
                        BEGIN(INITIAL);
                        return BAD_TOKEN;
                    }
	YY_BREAK

/* Intercept any raw ASP code blocks and pass them straight through. */
case 21:
YY_RULE_SETUP
#line 226 "flexer.l"
{
                                    tempStr = "";
                                    tempLoc.first_line = flexerLineNum;
                                    tempLoc.first_column = flexerCharPos - 2;
                                    BEGIN(RAW_ASP);
                                }
	YY_BREAK

case 22:
YY_RULE_SETUP
#line 233 "flexer.l"
{   // ASP code block finished, return its contents.
                                    tempLoc.last_line = flexerLineNum;
                                    tempLoc.last_column = flexerCharPos;
                                    TOK_ASP(tempStr);
                                    BEGIN(INITIAL);
                                    return T_ASP;
                                }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "flexer.l"
{   // Grab anything that isn't a newline.
                                    tempStr += flextext;
                                }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 243 "flexer.l"
{   // Handle newlines in ASP code blocks.
                                    flexerLineNum++;
                                    flexerCharPos = 1;
                                    tempStr += "\n";
                                }
	YY_BREAK

case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up flextext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up flextext again */
YY_RULE_SETUP
#line 250 "flexer.l"
{   // Lines that are just whitespace get passed through as special comments.
                        tempStr = flextext;
                        //tempStr += "\n";
                        tempLoc.first_line = flexerLineNum;
                        tempLoc.first_column = flexerCharPos - flexleng;
                        tempLoc.last_line = flexerLineNum;
                        tempLoc.last_column = flexerCharPos - 1;
                        TOK_COMMENT(tempStr,false);
                        flexerLineNum++;
                        flexerCharPos = 1;
                        return T_COMMENT;
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 262 "flexer.l"
{   // Empty, blank lines get passed through as special comments.
                        //tempStr = "\n";
                        tempStr = "";
                        tempLoc.first_line = flexerLineNum;
                        tempLoc.first_column = flexerCharPos - flexleng;
                        tempLoc.last_line = flexerLineNum;
                        tempLoc.last_column = flexerCharPos - 1;
                        TOK_COMMENT(tempStr,false);
                        flexerLineNum++;
                        flexerCharPos = 1;
                        return T_COMMENT;
                    }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 274 "flexer.l"
{   // Handle normal newlines.
                        flexerLineNum++;
                        flexerCharPos = 1;
                    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 279 "flexer.l"
// Eat any unclaimed whitespace.
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 281 "flexer.l"
{ TOK_INT(T_CONSTANTS); return T_CONSTANTS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 282 "flexer.l"
{ TOK_INT(T_INCLUDE); return T_INCLUDE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 283 "flexer.l"
{ TOK_INT(T_MACROS); return T_MACROS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 284 "flexer.l"
{ TOK_INT(T_OBJECTS); return T_OBJECTS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 285 "flexer.l"
{ TOK_INT(T_QUERY); return T_QUERY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 286 "flexer.l"
{ TOK_INT(T_SHOW); return T_SHOW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 287 "flexer.l"
{ TOK_INT(T_SORTS); return T_SORTS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 288 "flexer.l"
{ TOK_INT(T_VARIABLES); return T_VARIABLES; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 290 "flexer.l"
{ TOK_INT(T_ABACTION); return T_ABACTION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 291 "flexer.l"
{ TOK_INT(T_ACTION); return T_ACTION; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 292 "flexer.l"
{ TOK_INT(T_MACROACTION); return T_MACROACTION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 293 "flexer.l"
{ TOK_INT(T_ADDITIVEACTION); return T_ADDITIVEACTION; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 294 "flexer.l"
{ TOK_INT(T_ADDITIVEFLUENT); return T_ADDITIVEFLUENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 295 "flexer.l"
{ TOK_INT(T_AFTER); return T_AFTER; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 296 "flexer.l"
{ TOK_INT(T_ALWAYS); return T_ALWAYS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 297 "flexer.l"
{ TOK_INT(T_ATTRIBUTE); return T_ATTRIBUTE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 298 "flexer.l"
{ TOK_INT(T_BY); return T_BY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "flexer.l"
{ TOK_INT(T_CAUSED); return T_CAUSED; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 300 "flexer.l"
{ TOK_INT(T_CAUSES); return T_CAUSES; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 301 "flexer.l"
{ TOK_INT(T_CONSTRAINT); return T_CONSTRAINT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 302 "flexer.l"
{ TOK_INT(T_DECREMENTS); return T_DECREMENTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 303 "flexer.l"
{ TOK_INT(T_DEFAULT); return T_DEFAULT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 304 "flexer.l"
{ TOK_INT(T_EXOGENOUS); return T_EXOGENOUS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 305 "flexer.l"
{ TOK_INT(T_EXOGENOUSACTION); return T_EXOGENOUSACTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 306 "flexer.l"
{ TOK_INT(T_IF); return T_IF; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 307 "flexer.l"
{ TOK_INT(T_INCREMENTS); return T_INCREMENTS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 308 "flexer.l"
{ TOK_INT(T_INERTIAL); return T_INERTIAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 309 "flexer.l"
{ TOK_INT(T_INERTIALFLUENT); return T_INERTIALFLUENT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 310 "flexer.l"
{ TOK_INT(T_LABEL); return T_LABEL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 311 "flexer.l"
{ TOK_INT(T_MAY_CAUSE); return T_MAY_CAUSE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 312 "flexer.l"
{ TOK_INT(T_MAXADDITIVE); return T_MAXADDITIVE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 313 "flexer.l"
{ TOK_INT(T_MAXSTEP); return T_MAXSTEP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 314 "flexer.l"
{ TOK_INT(T_NEVER); return T_NEVER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 315 "flexer.l"
{ TOK_INT(T_NOCONCURRENCY); return T_NOCONCURRENCY; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 316 "flexer.l"
{ TOK_INT(T_NONEXECUTABLE); return T_NONEXECUTABLE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 317 "flexer.l"
{ TOK_INT(T_OF); return T_OF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 318 "flexer.l"
{ TOK_INT(T_POSSIBLY_CAUSED); return T_POSSIBLY_CAUSED; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 319 "flexer.l"
{ TOK_INT(T_RIGID); return T_RIGID; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 320 "flexer.l"
{ TOK_INT(T_SDFLUENT); return T_SDFLUENT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 321 "flexer.l"
{ TOK_INT(T_SIMPLEFLUENT); return T_SIMPLEFLUENT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 322 "flexer.l"
{ TOK_INT(T_UNLESS); return T_UNLESS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 323 "flexer.l"
{ TOK_INT(T_WHERE); return T_WHERE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 324 "flexer.l"
{ TOK_INT(T_IS); return T_IS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 326 "flexer.l"
{ TOK_INT(T_COLON_DASH); return T_COLON_DASH; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 327 "flexer.l"
{ TOK_INT(T_DBL_COLON); return T_DBL_COLON; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 328 "flexer.l"
{ TOK_INT(T_COLON); return T_COLON; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 330 "flexer.l"
{ TOK_INT(T_IMPL); return T_IMPL; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 331 "flexer.l"
{ TOK_INT(T_ARROW_RDASH); return T_ARROW_RDASH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 332 "flexer.l"
{ TOK_INT(T_DASH); return T_DASH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 334 "flexer.l"
{ TOK_INT(T_EQUIV); return T_EQUIV; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 335 "flexer.l"
{ TOK_INT(T_ARROW_LDASH); return T_ARROW_LDASH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 336 "flexer.l"
{ TOK_INT(T_ARROW_LEQ); return T_ARROW_LEQ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 337 "flexer.l"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 338 "flexer.l"
{ TOK_INT(T_LTHAN); return T_LTHAN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 340 "flexer.l"
{ TOK_INT(T_GTHAN_EQ); return T_GTHAN_EQ; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 341 "flexer.l"
{ TOK_INT(T_DBL_GTHAN); return T_DBL_GTHAN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 342 "flexer.l"
{ TOK_INT(T_GTHAN); return T_GTHAN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 344 "flexer.l"
{ TOK_INT(T_ARROW_REQ); return T_ARROW_REQ; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 345 "flexer.l"
{ TOK_INT(T_EQ_LTHAN); return T_EQ_LTHAN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 346 "flexer.l"
{ TOK_INT(T_DBL_EQ); return T_DBL_EQ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 347 "flexer.l"
{ TOK_INT(T_EQ); return T_EQ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 349 "flexer.l"
{ TOK_INT(T_DBL_AMP); return T_DBL_AMP; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 350 "flexer.l"
{ TOK_INT(T_AMP); return T_AMP; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 352 "flexer.l"
{ TOK_INT(T_DBL_PLUS); return T_DBL_PLUS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 353 "flexer.l"
{ TOK_INT(T_PLUS); return T_PLUS; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 355 "flexer.l"
{ TOK_INT(T_DBL_PERIOD); return T_DBL_PERIOD; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 356 "flexer.l"
{ TOK_INT(T_PERIOD); return T_PERIOD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 358 "flexer.l"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 359 "flexer.l"
{ TOK_INT(T_BIG_DISJ); return T_BIG_DISJ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 361 "flexer.l"
{ TOK_INT(T_INT_DIV); return T_INT_DIV; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 362 "flexer.l"
{ TOK_INT(T_BIG_CONJ); return T_BIG_CONJ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 364 "flexer.l"
{ TOK_INT(T_COMMA); return T_COMMA; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 366 "flexer.l"
{ TOK_INT(T_SEMICOLON); return T_SEMICOLON; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 368 "flexer.l"
{ TOK_INT(T_PIPE); return T_PIPE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 370 "flexer.l"
{ TOK_INT(T_POUND); return T_POUND; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 372 "flexer.l"
{ TOK_INT(T_STAR); return T_STAR; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 374 "flexer.l"
{ TOK_INT(T_AT); return T_AT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 376 "flexer.l"
{ TOK_INT(T_BRACKET_L); return T_BRACKET_L; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 377 "flexer.l"
{ TOK_INT(T_BRACKET_R); return T_BRACKET_R; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 379 "flexer.l"
{ TOK_INT(T_PAREN_L); return T_PAREN_L; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 380 "flexer.l"
{ TOK_INT(T_PAREN_R); return T_PAREN_R; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 382 "flexer.l"
{ TOK_INT(T_ABS); return T_ABS; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 383 "flexer.l"
{ TOK_INT(T_EQ); return T_EQ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 384 "flexer.l"
{ TOK_INT(T_FALSE); return T_FALSE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 385 "flexer.l"
{ TOK_INT(T_MOD); return T_MOD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 386 "flexer.l"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 387 "flexer.l"
{ TOK_INT(T_NONE); return T_NONE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 388 "flexer.l"
{ TOK_INT(T_NOT); return T_NOT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 389 "flexer.l"
{ TOK_INT(T_TRUE); return T_TRUE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 391 "flexer.l"
{ TOK_INT(atoi(flextext)); return T_INTEGER; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 392 "flexer.l"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 393 "flexer.l"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 394 "flexer.l"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
/* Match any other unrecognized character tokens, warn about them and stop. */
case 122:
YY_RULE_SETUP
#line 397 "flexer.l"
{
                        TOK_EOF;
                        std::string badTokErrStr = "";
                        badTokErrStr += "Unexpected token \"";
                        badTokErrStr += flextext;
                        badTokErrStr += "\".";
                        flexerError(badTokErrStr.c_str());
                        return BAD_TOKEN;
                    }
	YY_BREAK
case YY_STATE_EOF(BLK_SCOMMENT):
#line 407 "flexer.l"
{
                            TOK_EOF;
                            flexerError("Unterminated \"/*\" block comment.");
                            flexerLineNum = 1; // Reset flexerLineNum on EOF
                            flexerCharPos = 1; // Also reset flexerCharPos
                            return BAD_TOKEN;
                        }
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTE_STR):
#line 414 "flexer.l"
{
                                TOK_EOF;
                                flexerError("Unterminated quoted string.");
                                flexerLineNum = 1; // Reset flexerLineNum on EOF
                                flexerCharPos = 1; // Also reset flexerCharPos
                                return BAD_TOKEN;
                            }
	YY_BREAK
case YY_STATE_EOF(DOUBLE_QUOTE_STR):
#line 421 "flexer.l"
{
                                TOK_EOF;
                                flexerError("Unterminated quoted string.");
                                flexerLineNum = 1; // Reset flexerLineNum on EOF
                                flexerCharPos = 1; // Also reset flexerCharPos
                                return BAD_TOKEN;
                            }
	YY_BREAK
case YY_STATE_EOF(RAW_ASP):
#line 428 "flexer.l"
{
                        TOK_EOF;
                        flexerError("Unterminated ASP code block.");
                        flexerLineNum = 1; // Reset flexerLineNum on EOF
                        flexerCharPos = 1; // Also reset flexerCharPos
                        return BAD_TOKEN;
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 435 "flexer.l"
{
                            TOK_EOF;
                            flexerLineNum = 1; // Reset flexerLineNum on EOF
                            flexerCharPos = 1; // Also reset flexerCharPos
                            yyterminate();
                        }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 442 "flexer.l"
ECHO;
	YY_BREAK
#line 1938 "flexer.cpp"
case YY_STATE_EOF(LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed flexin at a new source and called
			 * flexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = flexin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( flexwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * flextext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of flexlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					flexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			flexrestart(flexin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) flexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 412 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 412 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 411);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					flexrestart(flexin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( flexwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve flextext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void flexrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        flexensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            flex_create_buffer(flexin,YY_BUF_SIZE );
	}

	flex_init_buffer(YY_CURRENT_BUFFER,input_file );
	flex_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void flex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		flexpop_buffer_state();
	 *		flexpush_buffer_state(new_buffer);
     */
	flexensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	flex_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (flexwrap()) processing, but the only time this flag
	 * is looked at is after flexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void flex_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	flexin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE flex_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) flexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in flex_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) flexalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in flex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	flex_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with flex_create_buffer()
 * 
 */
    void flex_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		flexfree((void *) b->yy_ch_buf  );

	flexfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a flexrestart() or at EOF.
 */
    static void flex_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	flex_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then flex_init_buffer was _probably_
     * called from flexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void flex_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		flex_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void flexpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	flexensure_buffer_stack();

	/* This block is copied from flex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from flex_switch_to_buffer. */
	flex_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void flexpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	flex_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		flex_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void flexensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)flexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in flexensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)flexrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in flexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE flex_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) flexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in flex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	flex_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to flexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       flex_scan_bytes() instead.
 */
YY_BUFFER_STATE flex_scan_string (yyconst char * yystr )
{
    
	return flex_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to flexlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE flex_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) flexalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in flex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = flex_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in flex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up flextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		flextext[flexleng] = (yy_hold_char); \
		(yy_c_buf_p) = flextext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		flexleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int flexget_lineno  (void)
{
        
    return flexlineno;
}

/** Get the input stream.
 * 
 */
FILE *flexget_in  (void)
{
        return flexin;
}

/** Get the output stream.
 * 
 */
FILE *flexget_out  (void)
{
        return flexout;
}

/** Get the length of the current token.
 * 
 */
int flexget_leng  (void)
{
        return flexleng;
}

/** Get the current token.
 * 
 */

char *flexget_text  (void)
{
        return flextext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void flexset_lineno (int  line_number )
{
    
    flexlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see flex_switch_to_buffer
 */
void flexset_in (FILE *  in_str )
{
        flexin = in_str ;
}

void flexset_out (FILE *  out_str )
{
        flexout = out_str ;
}

int flexget_debug  (void)
{
        return flex_flex_debug;
}

void flexset_debug (int  bdebug )
{
        flex_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from flexlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    flexin = stdin;
    flexout = stdout;
#else
    flexin = (FILE *) 0;
    flexout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * flexlex_init()
     */
    return 0;
}

/* flexlex_destroy is for both reentrant and non-reentrant scanners. */
int flexlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		flex_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		flexpop_buffer_state();
	}

	/* Destroy the stack itself. */
	flexfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * flexlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *flexalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *flexrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void flexfree (void * ptr )
{
	free( (char *) ptr );	/* see flexrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 442 "flexer.l"



// Outputs an error message to stderr.
void flexerError(char const *msg)
{
    std::cerr << "% Syntax Error, ";
    if(flexerFileName.length() > 0)
    {
        std::cerr << "File \"" << flexerFileName << "\", ";
    }
    std::cerr << "Line #" << flexerLineNum << "." << (flexerCharPos - flexleng) << ": " << msg << std::endl;
    return;
}

// Resets the state of the flexer.
void flexerReset()
{
    flexerLineNum = 1;
    flexerCharPos = 1;
    YY_FLUSH_BUFFER;
    BEGIN(INITIAL);
    return;
}

